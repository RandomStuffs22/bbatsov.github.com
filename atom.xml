<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[(think)]]></title>
  <link href="http://batsov.com/atom.xml" rel="self"/>
  <link href="http://batsov.com/"/>
  <updated>2014-01-01T13:14:32+02:00</updated>
  <id>http://batsov.com/</id>
  <author>
    <name><![CDATA[Bozhidar Batsov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Looking back at 2013]]></title>
    <link href="http://batsov.com/articles/2014/01/01/looking-back-at-2013/"/>
    <updated>2014-01-01T12:30:00+02:00</updated>
    <id>http://batsov.com/articles/2014/01/01/looking-back-at-2013</id>
    <content type="html"><![CDATA[<p>2013 was a good year for me in many aspects. I&rsquo;ll share here some of
the programming related achievements of mine over the year that made
me somewhat proud of myself.</p>

<h2>Achievements</h2>

<h3>Ruby</h3>

<h4>RuboCop</h4>

<p>I&rsquo;ve made great headway with the
<a href="https://github.com/bbatsov/rubocop">RuboCop</a> static code analyzer
over the year. Working on a big non-Rails Ruby project reminded me
why I fell in love with Ruby in the first place. I was also amazed by
great community that quickly formed around RuboCop and propelled it to
popularity. I hope that in 2014 I&rsquo;ll be able to deliver a 1.0 release.</p>

<h4>Blogging</h4>

<p>I finally did some Ruby-related blogging this year &ndash; mostly regarding
good programming style. I enjoyed it, although I noticed it&rsquo;s much
harder for me to blog, than it is to code. Good thing I became a
programmer and not a writer I guess!</p>

<h3>Emacs</h3>

<p>I spent a lot of time working on Emacs-related stuff over the year:</p>

<ul>
<li>I started a new Emacs blog called <a href="http://emacsredux.com">EmacsRedux</a></li>
<li>I improved a lot <a href="https://github.com/bbatsov/prelude">Prelude</a>
and <a href="https://github.com/bbatsov/projectile">Projectile</a></li>
<li>I contributed code to Emacs for the first time</li>
<li>I took over the maintenance of <a href="https://github.com/clojure-emacs/cider">CIDER</a></li>
<li>I was involved in a lesser role in the development of many cool Emacs extensions</li>
</ul>


<h3>Clojure</h3>

<p>I wrote a
<a href="https://github.com/bbatsov/clojure-style-guide">Clojure Style Guide</a>
at the beginning of the year. I also hoped I&rsquo;d be able to work on
static code analyzer for Clojure similar to RuboCop, but I got
sidetracked and this did not happen. I did lots of CIDER-related work
over the year and I hope I&rsquo;ll be able improve CIDER significantly in
2014 (I have so many great ideas about it!).</p>

<p>Clojure is still my favorite programming language and hope in 2014 I&rsquo;ll be
able to work on more Clojure projects.</p>

<h3>Misc</h3>

<p>I spent some time playing with algorithms and math for the first time
in a long while (inspired by Coursera).  This was lots of fun! I hope
that in 2014 I&rsquo;ll be able to allocate even more time to studying them
properly.</p>

<h2>Epilogue</h2>

<p>In previous years I generally spent a lot of time studying/researching new
programming related stuff &ndash; new languages, new frameworks, new tools,
new paradigms, etc. Conversely, I spent relatively little time hacking
on open-source projects. 2013 was quite different for me &ndash; very little
research, lots of open-source hacking. It was pretty tiresome at times, but
also extremely enjoyable and gratifying experience.</p>

<p>No idea how 2014 will turn out, but I hope it will be at least as fun
as 2013 was!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Projectile 0.10 is out!]]></title>
    <link href="http://batsov.com/articles/2013/12/09/projectile-0-dot-10-is-out/"/>
    <updated>2013-12-09T15:26:00+02:00</updated>
    <id>http://batsov.com/articles/2013/12/09/projectile-0-dot-10-is-out</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/bbatsov/projectile">Projectile</a> 0.10.0 is out!</p>

<p>This might come as a surprise for people tracking Projectile&rsquo;s
development, since recent snapshots were using 1.0 as the version
number, so allow me to explain. I&rsquo;ve been wanting to release
Projectile 1.0 for a while now, but I felt that without the addition
of <em>per-project settings</em> support and some refinements to the way
<em>ignoring of files &amp; folders</em> currently work, such moniker would be
unjustified. Unfortunately, lately I&rsquo;ve been quite busy working on
other projects like <a href="https://github.com/clojure-emacs/cider">cider</a>
and <a href="https://github.com/bbatsov/rubocop">RuboCop</a> and I don&rsquo;t have
that much time to work on Projectile, so I kept delaying the 1.0
version.</p>

<p>Recently I decided to release version 0.10 instead, for the benefit of
users of package repos like Marmalade. The minor bump in the version
doesn&rsquo;t mean that 0.10 is not a noteworthy update, though. 5 months of
development and more than a hundred commits from almost a dozen of
developers have really improved the Projectile experience.  It&rsquo;s
easily the biggest update of Projectile, since the project was
conceived.</p>

<p>Some of the highlights include:</p>

<ul>
<li><code>.projectile</code> is always taken into account (previously it was consulted only when doing <code>native</code> indexing)</li>
<li>There&rsquo;s now the ability to search for files in a specific directory</li>
<li>More project types are recognized</li>
<li>You can search for etags (ctags) in a project</li>
<li><strong>The Commander</strong> (a really cool feature inspired from CIDER &amp; SLIME, that I&rsquo;ll show in a bit)</li>
<li>Dozens of (mostly undocumented in the Changelog) bugfixes</li>
</ul>


<p>Have a look at the <a href="https://github.com/bbatsov/projectile/blob/master/CHANGELOG.md">changelog</a> for more details.</p>

<p>And here&rsquo;s the new <strong>Commander</strong> in action:</p>

<p><img src="http://batsov.com/images/articles/projectile-commander.gif"></p>

<p>Basically it gives you a way to invoke many of the Projectile commands
with a single key &ndash; <code>f</code> for <code>find-file</code>, <code>s</code> for <code>switch-project</code>,
etc. It&rsquo;s very handy when switching projects since with this command
you can always pick a different command to execute in the new
project. By the way, <code>projectile-switch-project</code> will now run the
commander, when invoked with a prefix argument (<code>C-u C-c p s</code>).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ruby's each_with_object]]></title>
    <link href="http://batsov.com/articles/2013/12/04/using-rubys-each-with-object/"/>
    <updated>2013-12-04T16:29:00+02:00</updated>
    <id>http://batsov.com/articles/2013/12/04/using-rubys-each-with-object</id>
    <content type="html"><![CDATA[<p>Sometimes we&rsquo;d like to build a new collection object from the elements
of another collection.  One trivial example would be element
occurrence counting, which basically means you need to build a hash
from an array.</p>

<p>People coming from an imperative background will probably implement this in terms of <code>each</code> (or <code>for</code>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nums</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">result</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># with each</span>
</span><span class='line'><span class="n">nums</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">result</span><span class="o">[</span><span class="n">n</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># with for</span>
</span><span class='line'><span class="k">for</span> <span class="n">num</span> <span class="k">in</span> <span class="n">nums</span>
</span><span class='line'>  <span class="n">result</span><span class="o">[</span><span class="n">num</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a reasonable solution, but surely we can do better!</p>

<p>Rubyists fond of functional programming techniques might use <code>reduce</code> to solve the problem at hand:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nums</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">nums</span><span class="o">.</span><span class="n">reduce</span><span class="p">(</span><span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="p">,</span> <span class="n">e</span><span class="o">|</span> <span class="n">a</span><span class="o">[</span><span class="n">e</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">a</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; {1=&gt;2, 2=&gt;1, 3=&gt;2, 5=&gt;1}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This code works well, but it&rsquo;s a bit more complex than it needs to be &ndash;
mostly because of the need to return the hash explicitly in <code>reduce</code>&rsquo;s block.
Enter <code>Enumerable#each_with_object</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">nums</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'><span class="n">nums</span><span class="o">.</span><span class="n">each_with_object</span><span class="p">(</span><span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> <span class="p">{</span> <span class="o">|</span><span class="n">e</span><span class="p">,</span> <span class="n">a</span><span class="o">|</span> <span class="n">a</span><span class="o">[</span><span class="n">e</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span> <span class="p">}</span>
</span><span class='line'><span class="c1"># =&gt; {1=&gt;2, 2=&gt;1, 3=&gt;2, 5=&gt;1}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>each_with_object</code> invokes its block for each element with an
arbitrary object argument, and returns the initially given object,
thus eliminating the need to return it ourselves as the block&rsquo;s
result. Simple and neat!</p>

<p>That&rsquo;s all for now, folks. I hope you&rsquo;ll find this article useful.
As usual I&rsquo;m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regexp anchors in Ruby]]></title>
    <link href="http://batsov.com/articles/2013/12/04/regexp-anchors-in-ruby/"/>
    <updated>2013-12-04T15:46:00+02:00</updated>
    <id>http://batsov.com/articles/2013/12/04/regexp-anchors-in-ruby</id>
    <content type="html"><![CDATA[<p>Some Rubyists, when faced with the task of matching against the
beginning or the end of a string, are prone to using <code>^</code> and <code>$</code> in
their regular expressions. Most of the time the code will seem to work properly,
but&hellip; these anchors don&rsquo;t actually match a string&rsquo;s beginning and
end &ndash; they match a <strong>line</strong>&rsquo;s beginning and end. Consider the
following example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">string</span> <span class="o">=</span> <span class="s1">&#39;username&#39;</span>
</span><span class='line'><span class="n">string</span><span class="o">[</span><span class="sr">/^username$/</span><span class="o">]</span>   <span class="c1"># matches (as expected)</span>
</span><span class='line'><span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;some injection</span><span class="se">\n</span><span class="s2">username&quot;</span>
</span><span class='line'><span class="n">string</span><span class="o">[</span><span class="sr">/^username$/</span><span class="o">]</span>   <span class="c1"># matches again(WAT???)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The anchors for beginning and end of a string are actually <code>\A</code> and
<code>\z</code>(there&rsquo;s also a similar <code>\Z</code> anchor, but it&rsquo;s rarely used in
practice):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">string</span> <span class="o">=</span> <span class="s2">&quot;some injection</span><span class="se">\n</span><span class="s2">username&quot;</span>
</span><span class='line'><span class="n">string</span><span class="o">[</span><span class="sr">/\Ausername\z/</span><span class="o">]</span> <span class="c1"># don&#39;t match</span>
</span></code></pre></td></tr></table></div></figure>


<p>In an actual application the line <code>string[/^username$/]</code> is a recipe for
disaster. That&rsquo;s why Rails 4 started raising exceptions when <code>^</code> and
<code>$</code> are used in <code>validates :something, format: { with: /.../ }</code>.</p>

<p>By the way, this isn&rsquo;t something specific to Ruby at all &ndash;  <code>\A</code> and <code>\z</code> are not the same
thing as <code>^</code> and <code>$</code> in most programming languages that have Perl-style regular expressions.</p>

<p>There&rsquo;s something peculiar in Ruby, though &ndash; it automatically uses
<strong>multiline mode</strong> (which enables the aforementioned behaviour of
having <code>^</code> and <code>$</code> match per line) for regular expressions. Other
languages support it as well, but usually you need to enable it
yourself, since it&rsquo;s not consider a particularly intuitive
default. For example &ndash; by default Perl, Java and C# treat <code>^</code> and <code>$</code> as
beginning/end of string until you <strong>explicitly</strong> enable <strong>multiline match mode</strong>
(<code>/m</code>). In Ruby <code>/m</code> simply allows <code>.</code> to match newlines.</p>

<p>I guess people, who&rsquo;ve recently switched to Ruby from another
language, would be most susceptible to writing potentially dangerous
code like this.</p>

<p>That&rsquo;s all for today folks. I hope you&rsquo;ll find this article useful.
As usual I&rsquo;m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RuboCop 0.14: Beyond the Ruby Style Guide]]></title>
    <link href="http://batsov.com/articles/2013/10/07/rubocop-0-dot-14-beyond-the-ruby-style-guide/"/>
    <updated>2013-10-07T14:56:00+03:00</updated>
    <id>http://batsov.com/articles/2013/10/07/rubocop-0-dot-14-beyond-the-ruby-style-guide</id>
    <content type="html"><![CDATA[<p>Good news, everyone &ndash; <a href="https://github.com/bbatsov/rubocop">RuboCop</a> 0.14 was just released!</p>

<p>Generally I announce RuboCop releases in only <a href="https://twitter.com/bbatsov">140 characters</a>,
but this time I&rsquo;ll make an exception. This release is more significant
than most of our recent releases for one particular reason &ndash; we&rsquo;ve
made an effort to make more aspects of RuboCop configurable than ever
before. For instance now you can make RuboCop enforce the use of
double-quoted strings, hashes that only use hash rockets, no spaces
inside block parentheses and more of that sort.</p>

<p>I&rsquo;ve started the project with the simple goal of creating a tool to help you follow the
<a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a> to the
letter &ndash; originally it didn&rsquo;t even have configuration options for that very reason :&ndash;)
The project, however, quickly outgrew its humble origin and became much more popular than I could have envisioned.
Today we have a core team of RuboCop hackers, dozens of contributors and thousands of users.
Having received a lot of feedback over the past year from people who use slightly
modified version of the style guide, I&rsquo;ve come to realize that the initial
approach was hardly optimal and now supporting various popular coding
practices is one of the core values of RuboCop.</p>

<p>If you&rsquo;ve abstained from trying out RuboCop, because you don&rsquo;t agree
with portions of the style guide &ndash; now it&rsquo;s a good time to take it out
for a spin. A list of all changes in 0.14 can be found
<a href="https://github.com/bbatsov/rubocop/blob/master/CHANGELOG.md">here</a>.
All configurable aspects of RuboCop are listed <a href="https://github.com/bbatsov/rubocop/blob/master/config/default.yml">here</a>.</p>

<p>P.S. As usual &ndash; suggestions for new features and improvements are always welcome! We can make RuboCop only as good as you want it to be!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ruby's gsub with a hash]]></title>
    <link href="http://batsov.com/articles/2013/10/03/using-rubys-gsub-with-a-hash/"/>
    <updated>2013-10-03T16:12:00+03:00</updated>
    <id>http://batsov.com/articles/2013/10/03/using-rubys-gsub-with-a-hash</id>
    <content type="html"><![CDATA[<p>Recently we discussed <a href="http://batsov.com/articles/2013/08/30/using-gsub-with-a-block/">how you can use <code>String#gsub</code> with a block</a>.
Today we&rsquo;ll examine another somewhat unknown feature of the <code>gsub</code> method &ndash; the ability to supply a replacement hash as the second argument (which is normally a string).</p>

<p>If the replacement argument is a hash, and the matched text is one of its keys, the corresponding value is the replacement string. Here&rsquo;s a simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">geekify</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>  <span class="n">string</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/[leto]/</span><span class="p">,</span> <span class="s1">&#39;l&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;e&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;3&#39;</span><span class="p">,</span> <span class="s1">&#39;t&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;7&#39;</span><span class="p">,</span> <span class="s1">&#39;o&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;0&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">geekify</span><span class="p">(</span><span class="s1">&#39;leet&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &#39;1337&#39;</span>
</span><span class='line'><span class="n">geekify</span><span class="p">(</span><span class="s1">&#39;noob&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &#39;n00b&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Keep in mind you&rsquo;re not restricted to single character replacements:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">doctorize</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>
</span><span class='line'>  <span class="n">string</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/M(iste)?r/</span><span class="p">,</span> <span class="s1">&#39;Mister&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Doctor&#39;</span><span class="p">,</span> <span class="s1">&#39;Mr&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Dr&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">doctorize</span><span class="p">(</span><span class="s1">&#39;Mister Freeze&#39;</span><span class="p">)</span> <span class="c1"># =&gt; &#39;Doctor Freeze&#39;</span>
</span><span class='line'><span class="n">doctorize</span><span class="p">(</span><span class="s1">&#39;Mr Smith&#39;</span><span class="p">)</span>   <span class="c1"># =&gt; &#39;Dr Smith&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all for today folks! I hope you&rsquo;ll find this short article useful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #11: Invoking Lambdas/Procs]]></title>
    <link href="http://batsov.com/articles/2013/09/26/the-elements-of-style-in-ruby-number-11-invoking-lambdas-slash-procs/"/>
    <updated>2013-09-26T17:43:00+03:00</updated>
    <id>http://batsov.com/articles/2013/09/26/the-elements-of-style-in-ruby-number-11-invoking-lambdas-slash-procs</id>
    <content type="html"><![CDATA[<p>There are whopping 4 ways to invoke a lambda (or a proc) in Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">lambda</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nb">lambda</span><span class="o">[</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="nb">lambda</span><span class="o">.</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># works only with one argument lambdas</span>
</span><span class='line'><span class="nb">lambda</span> <span class="o">===</span> <span class="n">arg</span>
</span></code></pre></td></tr></table></div></figure>


<p>The last option <code>Proc#===</code> is a special case, that&rsquo;s quite useful
in <a href="http://batsov.com/articles/2013/09/24/lambdas-slash-procs-in-case-expressions/">case expressions</a>,
but should never the used directly.</p>

<p>Of the three general purpose <code>Proc</code> methods that are available (it&rsquo;s
actually just one method with two aliases) I&rsquo;d strongly encourage you
to stick with<code>Proc#call</code>. The reasons are quite simple:</p>

<ul>
<li><p><code>lambda[arg]</code> looks like an index access on some data structure and you&rsquo;d certainly
have to analyze the code context to understand what&rsquo;s going on (especially since the <code>lambda</code> is unlikely to actually be named
<code>lambda</code> in actual code :&ndash;)).</p></li>
<li><p><code>lambda.(arg)</code> is a cute syntactic trick, but it&rsquo;s really easy to overlook the <code>.</code> and assume that this is a normal
method call (which probably was the point when this syntax was introduced). <code>lambda</code>s in Ruby are not real lambdas (they are instances of the <code>Proc</code> class) and we should simply embrace this fact instead of trying to hide it behind awkward syntax.</p></li>
</ul>


<p>I value code clarity and readability immensely and I&rsquo;m not particularly fond of excessive usage of
operator overloading. The use of operators for lambda invocations in Ruby represents the ugly side of operator overloading &ndash;
instead of increasing the readability of the code, the operators actually decrease it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lambdas/Procs in Case Expressions]]></title>
    <link href="http://batsov.com/articles/2013/09/24/lambdas-slash-procs-in-case-expressions/"/>
    <updated>2013-09-24T12:07:00+03:00</updated>
    <id>http://batsov.com/articles/2013/09/24/lambdas-slash-procs-in-case-expressions</id>
    <content type="html"><![CDATA[<p>Most Rubyists know they can use literals, classes, ranges and regular expressions in the <code>when</code> branches of a <code>case</code> expression:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="n">something</span>
</span><span class='line'><span class="k">when</span> <span class="nb">Array</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">when</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">when</span> <span class="sr">/some_regexp/</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you probably know <code>case</code> relies on the <code>===</code> (a.k.a. the case equality operator) being defined for
the supplied conditions. Ruby will convert the above code to something
like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="n">something</span>
</span><span class='line'><span class="k">when</span> <span class="nb">Array</span> <span class="o">===</span> <span class="n">something</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">when</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span> <span class="o">===</span> <span class="n">something</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">when</span> <span class="sr">/some_regexp/</span> <span class="o">===</span> <span class="n">something</span> <span class="k">then</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Perhaps somewhat surprisingly <code>===</code> is also defined in the <code>Proc</code> class, used to create <code>procs</code> and <code>lambdas</code>. It&rsquo;s defined to simply issue a <code>Proc#call</code> with the right-hand side argument of <code>===</code> as an argument:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">is_even</span> <span class="o">=</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">even?</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">is_even</span> <span class="o">===</span> <span class="mi">5</span> <span class="c1"># =&gt; false</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># same as</span>
</span><span class='line'><span class="n">is_even</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives us the possibility to leverage <code>procs</code> and <code>lambdas</code> as the conditions for <code>when</code> branches. Here&rsquo;s a trivial example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">even?</span>
</span><span class='line'>  <span class="o">-&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">even?</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">odd?</span>
</span><span class='line'>  <span class="o">-&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">odd?</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">x</span>
</span><span class='line'><span class="k">when</span> <span class="n">even?</span> <span class="k">then</span> <span class="nb">puts</span> <span class="s1">&#39;even&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="n">odd?</span> <span class="k">then</span> <span class="nb">puts</span> <span class="s1">&#39;odd&#39;</span>
</span><span class='line'><span class="k">else</span> <span class="nb">puts</span> <span class="s1">&#39;Impossible!&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can also save a few lines by defining the lambdas inline:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="n">x</span>
</span><span class='line'><span class="k">when</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">even?</span> <span class="p">}</span> <span class="k">then</span> <span class="nb">puts</span> <span class="s1">&#39;even&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="o">-&gt;</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span> <span class="n">n</span><span class="o">.</span><span class="n">odd?</span> <span class="p">}</span> <span class="k">then</span> <span class="nb">puts</span> <span class="s1">&#39;odd&#39;</span>
</span><span class='line'><span class="k">else</span> <span class="nb">puts</span> <span class="s1">&#39;Impossible!&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Things get even better if your lambdas capture some additional arguments. Consider this example checking HTTP response codes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">response_code?</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
</span><span class='line'>  <span class="o">-&gt;</span><span class="p">(</span><span class="n">response</span><span class="p">)</span> <span class="p">{</span> <span class="n">response</span><span class="o">.</span><span class="n">code</span> <span class="o">==</span> <span class="n">code</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">case</span> <span class="n">response</span>
</span><span class='line'><span class="k">when</span> <span class="n">response_code?</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span> <span class="k">then</span> <span class="s1">&#39;OK&#39;</span>
</span><span class='line'><span class="k">when</span> <span class="n">response_code?</span><span class="p">(</span><span class="mi">404</span><span class="p">)</span> <span class="k">then</span> <span class="s1">&#39;Not found&#39;</span>
</span><span class='line'><span class="k">else</span> <span class="s1">&#39;Unknown code&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty neat, right?</p>

<p>That&rsquo;s all for today folks! Code long and prosper!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #10: In cryptic Perlisms we do not trust]]></title>
    <link href="http://batsov.com/articles/2013/09/05/the-elements-of-style-in-ruby-number-10-in-cryptic-perlisms-we-do-not-trust/"/>
    <updated>2013-09-05T11:41:00+03:00</updated>
    <id>http://batsov.com/articles/2013/09/05/the-elements-of-style-in-ruby-number-10-in-cryptic-perlisms-we-do-not-trust</id>
    <content type="html"><![CDATA[<p>For better or for worse Perl had significant influence over Ruby&rsquo;s
initial design. A lot of things were directly borrowed from Perl, but
over the years the Ruby community rejected most of the Perlisms. In
this article I&rsquo;ll go over most of the Perl legacy which you should try
to steer clear from.</p>

<h3>Global variables</h3>

<p>Global variables are the nemesis of object-oriented programming(most
OO languages don&rsquo;t even have the concept of a global variable). Don&rsquo;t
introduce any of those in your Ruby programs! In most cases you can
substitute them for module instance variables:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="vg">$foo_bar</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#good</span>
</span><span class='line'><span class="k">module</span> <span class="nn">Foo</span>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:bar</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">Foo</span><span class="o">.</span><span class="n">bar</span> <span class="o">=</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately, one cannot code Ruby and get away without using the built-in global
variables&hellip;</p>

<h3>Special global variables</h3>

<p>Originally Ruby borrowed just about all of Perl&rsquo;s special global
variables, known worldwide for their <strong>intention revealing names</strong> &ndash;
<code>$:</code>, <code>$;</code>, <code>$!</code>, <code>$$</code>, <code>$\</code>, etc. I&rsquo;ve coded Ruby for quite some time now and
still can&rsquo;t remember what half of those meant (and I knew a bit of
Perl before I knew any Ruby). Luckily at some point the
<a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/English/rdoc/English.html">English library</a>
was added to Ruby, which simply adds sensible aliases for the cryptic
Perl names. With it you can change this code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$:</span><span class="o">.</span><span class="n">unshift</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">files</span> <span class="o">=</span> <span class="sb">`git ls-files`</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="vg">$\</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;English&#39;</span>
</span><span class='line'><span class="vg">$LOAD_PATH</span><span class="o">.</span><span class="n">unshift</span> <span class="no">File</span><span class="o">.</span><span class="n">dirname</span><span class="p">(</span><span class="bp">__FILE__</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">files</span> <span class="o">=</span> <span class="sb">`git ls-files`</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="vg">$INPUT_RECORD_SEPARATOR</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I think that the improvement is pretty obvious.  Why <code>English</code> is not required by
default is beyond me. Personally I use it always and I think you should do the same.</p>

<h3>Last regexp captures</h3>

<p>When you do a regexp match (like <code>/regexp/ ~= string</code>) a few special
global variables with funky names get populated with the prematch,
match, postmatch, etc. If the regexp has any groups in it, the stuff
they matched gets assigned to other special variables with the
descriptive names <code>$1</code> (for the first group), <code>$2</code> (for the second
group), etc. This idiom is unfortunately very popular with Ruby
developers, likely because few of them know of <code>Regexp.last_match</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sr">/(regexp)/</span> <span class="o">=~</span> <span class="n">string</span>
</span><span class='line'><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># this is Perl-style</span>
</span><span class='line'><span class="n">process</span> <span class="vg">$1</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># this is the same, but more clear and more object oriented</span>
</span><span class='line'><span class="n">process</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">last_match</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically you can extract from <code>Regexp.last_match</code> everything you&rsquo;d get from the special global variables.</p>

<p>Yep, you&rsquo;ll have to type more, but when clarity is at stake a little bit of extra typing is certainly justified.</p>

<p>You can even go a step further and use the <code>Regexp#match</code> method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">md</span> <span class="o">=</span> <span class="sr">/(Bat.+)\s/</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s1">&#39;Batman rules!&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; #&lt;MatchData &quot;Batman &quot; 1:&quot;Batman&quot;&gt;</span>
</span><span class='line'><span class="n">md</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'><span class="c1">#=&gt; &quot;Batman&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>By the way, keep in mind that it&rsquo;s generally a good idea to use named
regexp groups over positional ones, once you&rsquo;re dealing with more than
two groups. Numbers simply don&rsquo;t convey that much meaning&hellip;</p>

<h3>BEGIN/END blocks</h3>

<p>Strictly speaking those came from <code>awk</code>, but I still consider them
part of the Perl legacy. If you don&rsquo;t know what I&rsquo;m talking about feel
free to skip this section &ndash; your soul has already been saved.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">END</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Exiting...&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;Processing...&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">BEGIN</span> <span class="p">{</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Starting...&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>BEGIN</code> blocks are executed before everything else in your program in
the order in which they are encountered. <code>END</code> blocks are executed right before
the program exits. Those hideous constructs mess with the flow of
control of the program and are totally useless. I&rsquo;ve never ever needed
a <code>BEGIN</code> block and <code>END</code> blocks are totally replaceable with
<code>Kernel#at_exit</code>. I guess they might have some utility for old-school
scripting tasks, but application developers should ignore them
completely!</p>

<h3>Flip-flops</h3>

<p>Same as in the previous section &ndash; if you don&rsquo;t know what I&rsquo;m talking about feel free to
skip this section &ndash; your soul has already been saved.</p>

<p>Flip-flops are an obscure conditional construct with just a single useful application &ndash; text processing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">DATA</span><span class="o">.</span><span class="n">each_line</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">print</span> <span class="n">line</span> <span class="k">if</span> <span class="p">(</span><span class="n">line</span> <span class="o">=~</span> <span class="sr">/begin/</span><span class="p">)</span><span class="o">.</span><span class="n">.</span><span class="p">(</span><span class="n">line</span> <span class="o">=~</span> <span class="sr">/end/</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="cp">__END__</span>
</span><span class='line'><span class="cp">0a</span>
</span><span class='line'><span class="cp">1begin</span>
</span><span class='line'><span class="cp">2c</span>
</span><span class='line'><span class="cp">3end</span>
</span><span class='line'><span class="cp">4e</span>
</span><span class='line'><span class="cp">5f</span>
</span><span class='line'><span class="cp">6begin</span>
</span><span class='line'><span class="cp">7end</span>
</span><span class='line'><span class="cp">8i</span>
</span><span class='line'><span class="cp">9j</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will print:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">1</span><span class="k">begin</span>
</span><span class='line'><span class="mi">2</span><span class="n">c</span>
</span><span class='line'><span class="mi">3</span><span class="k">end</span>
</span><span class='line'><span class="mi">6</span><span class="k">begin</span>
</span><span class='line'><span class="mi">7</span><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hopefully you&rsquo;ve managed to deduce how they work from this example, if
you haven&rsquo;t &ndash; you&rsquo;ve just understood what their main problem is.</p>

<p>I never had to use those and probably you won&rsquo;t have a reason to use them
either. Their usage is likely going to do just one thing for you &ndash; reduce the
readability of the code you&rsquo;re writing.</p>

<h3>Epilogue</h3>

<p>I&rsquo;d really love to see some of those Perlisms out of Ruby &ndash; the
removal of <code>flip-flops</code> and <code>BEGIN/END</code> gets suggested upstream every
now and then and might happen in Ruby 3.0. Removing the global
variables, however, is unlikely to ever happen since that would be a
huge change.</p>

<p>You can use <a href="https://github.com/bbatsov/rubocop">RuboCop</a>
to identify and fix such shortfalls of your code.</p>

<p>As usual I&rsquo;m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A couple of useful extensions to Ruby's Enumerable module]]></title>
    <link href="http://batsov.com/articles/2013/09/03/a-couple-of-useful-extensions-to-rubys-enumerable-module/"/>
    <updated>2013-09-03T15:20:00+03:00</updated>
    <id>http://batsov.com/articles/2013/09/03/a-couple-of-useful-extensions-to-rubys-enumerable-module</id>
    <content type="html"><![CDATA[<p>Ruby&rsquo;s <a href="http://ruby-doc.org/core-2.0.0/Enumerable.html">Enumerable</a>
module is pretty extensive, but from time to time I wish it had some
extra methods, that are available in
the standard libraries of other languages like Scala, Groovy, Haskell
and Clojure. I&rsquo;m pretty sure I&rsquo;m not the only one, that&rsquo;s why I&rsquo;m writing this post.</p>

<p>Here I&rsquo;ll show you a couple of (hopefully) useful extensions I
implemented for <code>Enumerable</code> in the
<a href="https://github.com/bbatsov/powerpack">Powerpack</a> library. Let&rsquo;s start
with <code>drop_last</code> and <code>take_last</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">drop_last</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span> <span class="c1">#=&gt; [1, 2, 3]</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">)</span><span class="o">.</span><span class="n">take_last</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="c1">#=&gt; [8, 9, 10]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty neat! Concise and memory efficient (compared to using
<code>reverse</code>). <code>drop_last</code> and <code>take_last</code> were borrowed from Clojure and
I use them quite often. There are also <code>drop_last_while</code> and
<code>take_last_while</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">drop_last_while</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:odd?</span><span class="p">)</span> <span class="c1">#=&gt; [1, 2]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="o">].</span><span class="n">take_last_while</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:odd?</span><span class="p">)</span> <span class="c1">#=&gt; [3, 5]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Summing a collection is also something that pops quite often in the wild:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">3</span><span class="p">)</span><span class="o">.</span><span class="n">sum</span> <span class="c1">#=&gt; 6</span>
</span><span class='line'><span class="o">[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">3</span><span class="o">]].</span><span class="n">sum</span> <span class="c1">#=&gt; [1, 2, 3]</span>
</span><span class='line'><span class="o">[].</span><span class="n">sum</span> <span class="c1">#=&gt; nil</span>
</span><span class='line'><span class="o">[].</span><span class="n">sum</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="c1">#=&gt; 0</span>
</span></code></pre></td></tr></table></div></figure>


<p>While I understand why it doesn&rsquo;t make sense to have this in
<code>Enumerable</code> by default (not every enumerable can be summed), this method is still
pretty useful and I like having it around.</p>

<p><code>Enumerable#one?</code> is a neat (if somewhat unknown) method that lets
you quickly check if only a single element matches a predicate or a
collection has only one element that&rsquo;s not logically false:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">one?</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:even?</span><span class="p">)</span> <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">].</span><span class="n">one?</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:even?</span><span class="p">)</span> <span class="c1">#=&gt; false</span>
</span><span class='line'><span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="mi">5</span><span class="o">].</span><span class="n">one?</span> <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">].</span><span class="n">one?</span> <span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unfortunately there is no method <code>Enumerable#several?</code>, so I added one to Powerpack:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">several?</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:even?</span><span class="p">)</span> <span class="c1">#=&gt; false</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">].</span><span class="n">several?</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:even?</span><span class="p">)</span> <span class="c1">#=&gt; true</span>
</span><span class='line'><span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="kp">false</span><span class="p">,</span> <span class="mi">5</span><span class="o">].</span><span class="n">several?</span> <span class="c1">#=&gt; false</span>
</span><span class='line'><span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">].</span><span class="n">several?</span> <span class="c1">#=&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, counting the frequencies of elements in a collection is a common enough task to justify having it as method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="ss">:symbol</span><span class="p">,</span> <span class="s1">&#39;string&#39;</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="ss">:symbol</span><span class="p">,</span> <span class="mi">1</span><span class="o">].</span><span class="n">frequencies</span>
</span><span class='line'>    <span class="c1">#     #=&gt; { 1 =&gt; 2, :symbol =&gt; 2, &#39;string&#39; =&gt; 1, 3 =&gt; 1 }</span>
</span></code></pre></td></tr></table></div></figure>


<p>None of these methods are spectacular, but I feel they can make the
code we write a little bit more concise, efficient and readable.
Hopefully some of these methods will make it
one day to Ruby proper, but until then you can use them from
<a href="https://github.com/bbatsov/powerpack">Powerpack</a>.</p>

<p>And that&rsquo;s all for today!</p>

<p>I&rsquo;d really love to hear what methods would you like to add to
<code>Enumerable</code> (and other core Ruby modules and classes), so please
share this with me in the comments or on
<a href="http://twitter.com/bbatsov">Twitter</a>. Maybe some of them will land in Powerpack!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Ruby's gsub with a block]]></title>
    <link href="http://batsov.com/articles/2013/08/30/using-gsub-with-a-block/"/>
    <updated>2013-08-30T15:29:00+03:00</updated>
    <id>http://batsov.com/articles/2013/08/30/using-gsub-with-a-block</id>
    <content type="html"><![CDATA[<p><code>String#gsub</code> is one of the most used Ruby methods in the wild. Just
about every Ruby programmer knows about the method and uses it fairly
regularly.</p>

<p>Here&rsquo;s a quick refresher of the typical <code>gsub</code> usage:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># using string match</span>
</span><span class='line'><span class="s1">&#39;John Wayne&#39;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;Bruce&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Bruce Wayne&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># using regexp match</span>
</span><span class='line'><span class="s1">&#39;John   Wayne&#39;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\w+\s+(\w+)/</span><span class="p">,</span> <span class="s1">&#39;Bruce \1&#39;</span><span class="p">)</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Bruce Wayne&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically we can replace string and regexp matches with other
strings. When doing regexp matches we can access the matched groups
individually with <code>\1</code>, <code>\2</code>, etc and embed them in the replacement
string.  Sometimes, however, some additional processing of the matched
data might be required. Consider this trivial example &ndash; we might want
to increment a matched number by 1. Here <code>gsub</code>&rsquo;s version that takes a
block comes into action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># num will be passed the string &#39;12&#39;</span>
</span><span class='line'><span class="s1">&#39;Apollo 12&#39;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\d+/</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span> <span class="n">num</span><span class="o">.</span><span class="n">to_i</span><span class="o">.</span><span class="n">next</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Apollo 13&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically we&rsquo;re replacing the matched portion of the string with the
result of the block. While the param enhances the readability of the code it&rsquo;s not necessary:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># we&#39;re not making use of a block param</span>
</span><span class='line'><span class="s1">&#39;Apollo 12&#39;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/(\d+)/</span><span class="p">)</span> <span class="p">{</span> <span class="no">Regexp</span><span class="o">.</span><span class="n">last_match</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">to_i</span><span class="o">.</span><span class="n">next</span> <span class="p">}</span>
</span><span class='line'><span class="o">=&gt;</span> <span class="s2">&quot;Apollo 13&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Regexp.last_match[1]</code> is the OO version of the obscure (but pretty
popular) Perlism <code>$1</code>. In this particular case using the block param
(as in the first example) is obviously a better idea.</p>

<p>Note that some people expect that <code>gsub</code> would yield to the block all
the matched groups as arguments &ndash; that is not the case, you&rsquo;ll always
get a single argument denoting the entire regexp match.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># here name is &#39;Apollo 12&#39; and number is blank</span>
</span><span class='line'><span class="s1">&#39;Apollo 12&#39;</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/(\w+) (\d+)/</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">number</span><span class="o">|</span> <span class="nb">puts</span> <span class="nb">name</span><span class="p">,</span> <span class="n">number</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Keep this in mind!</p>

<p>That&rsquo;s all for today folks! I hope you&rsquo;ll find this short article useful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #9: Hash#has_key? and Hash#has_value? are deprecated]]></title>
    <link href="http://batsov.com/articles/2013/08/21/the-elements-of-style-in-ruby-number-9-hash-number-has-key-and-hash-number-has-value-are-deprecated/"/>
    <updated>2013-08-21T17:04:00+03:00</updated>
    <id>http://batsov.com/articles/2013/08/21/the-elements-of-style-in-ruby-number-9-hash-number-has-key-and-hash-number-has-value-are-deprecated</id>
    <content type="html"><![CDATA[<p>One can often find similar code in the wild:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">some_hash</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">some_key</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>has_something?</code> predicates are not idiomatic in Ruby and
<code>Hash#has_key?</code> and <code>Hash#has_value?</code> are nothing, but remnants of the
early days of Ruby. In fact, according to Matz, they are
<a href="http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/43765">deprecated</a>
in favor of <code>Hash#key?</code> and <code>Hash#value?</code>.</p>

<p>The above snippet should look like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">some_hash</span><span class="o">.</span><span class="n">key?</span><span class="p">(</span><span class="n">some_key</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As usual &ndash; you can use <a href="https://github.com/bbatsov/rubocop">RuboCop</a>
to identify and fix such shortfalls of your code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Announcing the Powerpack library]]></title>
    <link href="http://batsov.com/articles/2013/08/21/announcing-the-powerpack-library/"/>
    <updated>2013-08-21T16:17:00+03:00</updated>
    <id>http://batsov.com/articles/2013/08/21/announcing-the-powerpack-library</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/bbatsov/powerpack">Powerpack</a> is a small Ruby
library containing (at this point) a few extensions to some core Ruby
classes. I guess that in a way one can say it&rsquo;s something like Rails&rsquo;s
ActiveSupport, but with much smaller scope.</p>

<p>Since extending core classes is nasty business great care has been
taken to do so <em>properly</em>. For one &ndash; Powerpack would not include its extension
methods if the target class already has method named the same way.</p>

<p>Additionally &ndash; you&rsquo;re able to selectively use the extension methods
that Powerpack provides.You can load the entire <code>powerpack</code> library:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'powerpack'</span></code></pre></td></tr></table></div></figure>


<p>You can load only the <code>String</code> extensions:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'powerpack/string'</span></code></pre></td></tr></table></div></figure>


<p>You can load only a specific extension like <code>String#format</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'powerpack/string/format'</span></code></pre></td></tr></table></div></figure>


<p>Powerpack was born from my work on the
<a href="https://github.com/bbatsov/rubocop">RuboCop</a> static code
analyzer. From time to time I wished I had some of ActiveSupport&rsquo;s
methods (but was unwilling to use ActiveSupport for various reasons)
or some useful method I&rsquo;ve come across in the standard libraries of
other popular languages(<code>String#format</code> was inspired from Java,
<code>Numeric#pos?</code> and <code>Numeric#neg?</code> were inspired from Clojure, etc). It
has been helpful to me and I guess it might be helpful to some of you
as well.</p>

<p>If you&rsquo;d like to know more, have a look at the
<a href="http://rubydoc.info/github/bbatsov/powerpack/frames">online docs</a>.</p>

<p>I&rsquo;d love to hear your thoughts about Powerpack in its current form and
suggestions about its future (more helpful extensions for
instance). Comments, tickets and <a href="http://twitter.com/bbatsov">Twitter</a>
are at your disposal!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #8: Know Thy Predicates]]></title>
    <link href="http://batsov.com/articles/2013/08/14/the-elements-of-style-in-ruby-number-8-know-thy-predicates/"/>
    <updated>2013-08-14T17:28:00+03:00</updated>
    <id>http://batsov.com/articles/2013/08/14/the-elements-of-style-in-ruby-number-8-know-thy-predicates</id>
    <content type="html"><![CDATA[<p>I often see people writing code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">x</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Obviously <code>Fixnum#even?</code> would have been a better choice:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">even?</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is also <code>Fixnum#odd?</code> if you need to check for odd numbers.</p>

<p>By the way, there is even a <code>Numeric#zero?</code> predicate:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># same as the above (provided x is a number)</span>
</span><span class='line'><span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">zero?</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Personally I feel that <code>x == 0</code> makes more sense for such simple
numeric checks, but <code>zero?</code> is there for those you who think
otherwise. <code>x == 0</code> also has the benefit of being <code>nil</code> safe, but
that&rsquo;s not of significant importance.</p>

<p>The <a href="https://github.com/bbatsov/powerpack">Powerpack library</a> also
includes the predicate methods <code>Fixnum#pos?</code> and <code>Fixnum#neg?</code>, which
are roughly the same as <code>&gt; 0</code> and <code>&lt; 0</code> comparisons.</p>

<p>Another bit of code you&rsquo;ll often see is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">7</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>While there is nothing particularly bad about that code, I&rsquo;d argue
that <code>between?</code> makes for a nicer (and more OO) alternative:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">x</span><span class="o">.</span><span class="n">between?</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using a range predicate you can also exclude the end value:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">1000</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># is the same as</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="mi">1000</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>When using predicate methods you should be mindful of <code>nil</code>
receivers. That&rsquo;s generally not a serious issue in practice but still I&rsquo;d ask
you to consider this example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">arr</span> <span class="o">==</span> <span class="o">[]</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s not equivalent to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">arr</span><span class="o">.</span><span class="n">empty?</span>
</span></code></pre></td></tr></table></div></figure>


<p>Why so? Because <code>arr</code> might be <code>nil</code>. So the equivalent code would be:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="o">!</span><span class="n">arr</span><span class="o">.</span><span class="n">nil?</span> <span class="o">&amp;&amp;</span> <span class="n">arr</span><span class="o">.</span><span class="n">empty?</span>
</span></code></pre></td></tr></table></div></figure>


<p>Of course checking for <code>nil</code>s like this is generally not a good idea, but
that&rsquo;s a discussion for some other time.</p>

<p>On a somewhat related note <code>something.nil?</code> is generally preferred
over <code>something == nil</code>. If you&rsquo;re reasonably sure that <code>something</code>
can&rsquo;t have the value <code>false</code> you can, of course, simplify things even
further:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">something</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>As usual I&rsquo;m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android is not better. Neither is iOS.]]></title>
    <link href="http://batsov.com/articles/2013/08/14/android-is-not-better-neither-is-ios/"/>
    <updated>2013-08-14T14:20:00+03:00</updated>
    <id>http://batsov.com/articles/2013/08/14/android-is-not-better-neither-is-ios</id>
    <content type="html"><![CDATA[<h2>Prelude</h2>

<p>The following few days Paul Stamatiou’s article
<a href="http://paulstamatiou.com/android-is-better">Android Is Better</a> and
Marco Arment&rsquo;s excellent response
<a href="http://www.marco.org/2013/08/13/google-blindness">Google Blindness</a>
have been generating a lot of heated debates. This article is pretty
much my two cents on the subject.</p>

<p>First some background &ndash; I&rsquo;ve been an Android user for 4 years, before
switching to the iPhone 5. I&rsquo;ve also used several Android tablets
casually and I own an iPad. While I&rsquo;m a software engineer I&rsquo;ll try to
suppress the geek inside me and write from the perspective of a casual
smartphone/tablet user.</p>

<h2>Subjectivity, subjectivity, subjectivity</h2>

<p>Many people are saying <strong>Android is better!</strong> or <strong>iOS is
better!</strong>. Most of them try to make their personal view sound like
some universal truth &ndash; of course they&rsquo;re making subjective statements
and their view on Andriod/iOS reflects mostly their personal
preferences. Through years spent developing software I&rsquo;ve understood
that it is impossible to cater to everyone&rsquo;s needs &ndash; some people love
the direction you&rsquo;re taking with a project; the rest &ndash; totally hate
it. The same goes for operating systems and pretty much everything in
life.</p>

<p>I&rsquo;ll try to be as objective as humanly possible, but I&rsquo;m aware that
nobody is totally objective, no matter how much he tries. This article
will not feature inflammatory points and will not end with a
conclusion <strong>Android is better!</strong> or <strong>iOS is better!</strong>. If you&rsquo;re
looking for something like this &ndash; I guess you should stop reading
right now.</p>

<h2>On Android</h2>

<h3>My story with Android</h3>

<p>I was pretty excited for Android from day one, since at the time I was
extremely fond of free software, Linux and Google. I bought the second
Android phone that went on sale globally &ndash; the HTC Magic. This was
before the era of UI customizations, so I got what&rsquo;s commonly known
today as the Nexus experience. I was pretty pleased with the device
for a while, but then Android 2 came up and everything got messed up
for me. It turned out the only update HTC had planned for my device
was from Android 1.5 to 1.6 and for some reason I didn&rsquo;t even qualify for
it. Soon after Android 2&rsquo;s release a lot of apps simply dropped
support for Android 1.x and I was (for lack of better words)
<strong>fucked</strong>. Finally I decided to install CyanogenMod and got a hold of
the precious Android 2. I&rsquo;m pretty tech savvy but I guess most
regular users (like my and your parents) are probably not and they had
to live with the mostly unsupported older Android release. Not cool!</p>

<p>At this point my faith in Android was not shaken at all &ndash; I assumed
HTC were just a crappy company and that if I bought a device from some
respectable vendor I&rsquo;d have much better experience in the long run. So
I went ahead and bought the Sony Xperia Arc, which at the time was
Sony&rsquo;s flagship device, came with the latest Android at the time (2.3)
and was going to get Android 4 when it came out. This was my first
encounter with a crappy custom Android UI &ndash; I totally hated what Sony
had done with the UI (but then again Samsung&rsquo;s TouchWiz was no
better). What I hated even more was that their meddling with the pure
Android seemed to introduce some instabilities and crashes (some of
which required removing the device&rsquo;s battery). Anyways, I told
myself &ndash; Android 4 would come soon and with it the problems will go
away. Android 4 never came for me (at least not from Sony) &ndash; 6 months
after Sony announced that have started rolling out the update for the
Arc I hadn&rsquo;t got it. Back to CyanogenMod again&hellip;</p>

<p>Do you seen a pattern emerging? This bring me to&hellip;</p>

<h3>The Big Problem</h3>

<p>The biggest problem Android has, has nothing to do with the core OS
itself. It&rsquo;s actually related to the Android business model &ndash; lots of
vendors try to differentiate themselves from the other Android vendors
and do so by messing up the UI, bundling crappy apps, etc. The vendors
sell you something and neglect it afterwards. AFAIK from the major
Android vendors only Samsung provides reasonable upgrade paths to their
users. That said &ndash; my girlfriend has a Galaxy SII and got an Android 4.1
update just a couple of months ago&hellip;</p>

<p>This has lead to the legendary
<a href="http://visual.ly/android-fragmentation-visualized?view=true">Android segmentation</a>,
that Apple fanboys often refer to. Obviously one cannot provide
updates for a device forever, but providing at least a couple of
updates seems pretty reasonable to me.</p>

<p>I guess most <em>normal</em> people don&rsquo;t care that much about getting
updates, otherwise I cannot imagine how the vendors could be getting
away with that level of customer support&hellip;</p>

<p>Somewhat ironically the biggest problem of the business model is
closely related to it&rsquo;s biggest strength &ndash; the ability buy a device
with size and specs you want. Apple&rsquo;s choice it the hardware
department is rather limited.</p>

<h3>The Good Stuff</h3>

<p>The Android OS has a lot of merits, of course:</p>

<ul>
<li>proper multitasking</li>
<li>powerful notification system</li>
<li>the ability to change your default apps :&ndash;)</li>
<li>the ability to change the keyboard application</li>
<li>great integration with Google&rsquo;s apps</li>
<li>the extendable sharing infrastructure &ndash; you install an app that is a possible share destination and you can use it for sharing from everywhere sharing is supported</li>
<li>the ability to integrate apps like Viber and Skype with your contacts</li>
</ul>


<h3>The Bad Stuff</h3>

<p>All of the bad stuff I can think of is not actually in the Android OS itself, but still:</p>

<ul>
<li>few tablet optimized apps</li>
<li>most apps still debut first on iOS and arrive on Android a few months later (although not nearly as much as 5 years ago)</li>
<li>you&rsquo;re trusting an advertising company with all your personal data :&ndash;)</li>
</ul>


<h2>On iOS</h2>

<h3>My Story with iOS</h3>

<p>Even after my huge disappointment with the Arc I was still planning to
buy a new Android smartphone &ndash; this time I had learned my lesson and
were going for the Nexus 4. Unfortunately Google and LG had serious
inventory problems and after a few months of trying to buy one I
reluctantly bought myself an iPhone 5 instead. At first I was kind of disappointed by the OS.</p>

<h3>The Bad</h3>

<p>iOS seems kind of old and limiting (at least to a geek):</p>

<ul>
<li>pretty restricted form of multitasking (fixed in iOS 7)</li>
<li>no quick way to do simple things like turn off the wi-fi (fixed in iOS 7)</li>
<li>no way to change the default browser, email client, etc</li>
<li>crappy notifications</li>
<li>limited number of sharing options</li>
<li>no support for alternative keyboard applications</li>
<li>no apps co-operation</li>
</ul>


<p>iOS is a pretty restrictive environment by all means, but once you get
past the initial shock you realize that to some extent this is also
iOS&rsquo;s biggest strength.</p>

<h3>The Good</h3>

<ul>
<li><strong>shit just works</strong></li>
</ul>


<p>I often experience Android lock-ups that required a reboot on both my
Android phones (although there were fewer of those with
Cyanogen). With iOS I have mostly forgotten what a lock-up is &ndash; I
think I&rsquo;ve never restarted by iPhone since I bought it (my iPad,
however, did freeze on me about 5 times for about 2 two years). I Also
experience much less app crashes than I used to, but I guess Nexus
users don&rsquo;t get a lot of those either. With no multitasking for
everyone I&rsquo;ve also forgotten the scenario when an app misbehaving in
the background would eat up my entire battery (iOS7 will have
multitasking for all apps).</p>

<ul>
<li><strong>apps rock</strong></li>
</ul>


<p>Most of the apps I&rsquo;ve used on Android and iOS are a bit more polished,
feature-rich and stable on iOS. I guess this has to do with the fact
that even though Android has much more users, iOS still generates more
revenue.</p>

<ul>
<li>lots of guaranteed updates in a timely manner</li>
</ul>


<p>The iPhone 3GS got the iOS 6! Yep, it&rsquo;s slow as hell, but it got it!
That&rsquo;s why I call proper customer service! Of course, for Apple it&rsquo;s a
lot simpler to achieve this &ndash; it controls all the hardware and the
software. It&rsquo;s also pretty independent of wireless carriers.</p>

<h2>Epilogue</h2>

<p>Android as an OS is great. Android + a device from some crappy
company &ndash; not so great.</p>

<p>Most people who praise Android got converted by a Nexus device (see
the link from the beginning of the post). The Nexus Android experience is
excellent, but unfortunately very few people can benefit from
it. Hopefully the situation will change in the future &ndash; the addition
of devices like HTC One and Galaxy S4 to the Play Store is a step in
the right direction. If you contemplate buying an Android phone &ndash; for
the love of God, buy it from the Play Store!</p>

<p>iOS as an OS is pretty underwhelming (but iOS 7 might change
that). The iOS ecosystem on the other hand is pretty awesome! A
complete fusion of software and hardware &ndash; much the same as a Mac +
Mac OS.</p>

<p>All things considered it&rsquo;s pretty hard to make judgement calls like
<strong>one is better than the other</strong>. I like them both to some extend for
various reasons &ndash; for now I use an iPhone, but who knows what the
future holds for me. I don&rsquo;t suffer from brand loyalty to tech
companies, the only brands I&rsquo;m truly loyal to are New Balance and BMW. :&ndash;)</p>

<p>The important takeaway for you, dear reader, is not to take fanboy
fiction at face value, but to think for yourself, to be skeptical and
analytical and to make your own conclusions. Your personality,
preferences and needs alone determine what is the OS/device/etc for
you!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #7: The case against ===]]></title>
    <link href="http://batsov.com/articles/2013/07/10/the-elements-of-style-in-ruby-number-7-the-case-against-equals-equals-equals/"/>
    <updated>2013-07-10T15:44:00+03:00</updated>
    <id>http://batsov.com/articles/2013/07/10/the-elements-of-style-in-ruby-number-7-the-case-against-equals-equals-equals</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ll discuss the following section from the <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote><p>Avoid explicit use of the case equality operator <code>===</code>. As it name<br/>
implies it&rsquo;s meant to be used implicitly by <code>case</code> expressions and<br/>
outside of them it yields some pretty confusing code.</p></blockquote>

<p>For those of you who don&rsquo;t know of the case equality operator <code>===</code> &ndash;
it&rsquo;s the magic behind <code>case</code> that allows us to write code like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="n">something</span>
</span><span class='line'><span class="k">when</span> <span class="nb">Array</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">when</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">when</span> <span class="sr">/some_regexp/</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby will convert the above code to something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="n">something</span>
</span><span class='line'><span class="k">when</span> <span class="nb">Array</span> <span class="o">===</span> <span class="n">something</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">when</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span> <span class="o">===</span> <span class="n">something</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">when</span> <span class="sr">/some_regexp/</span> <span class="o">===</span> <span class="n">something</span> <span class="k">then</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>For many classes (like <code>Fixnum</code> and <code>String</code>) <code>===</code> will behave the
same way as <code>==</code>.  On the other hand &ndash; <code>Module</code>, <code>Range</code> and <code>Regexp</code>
define customized versions of the operator method <code>===</code>.  Knowing how
these 3 classes have defined <code>===</code>, the case expression is also
equivalent to this one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">case</span> <span class="n">something</span>
</span><span class='line'><span class="k">when</span> <span class="n">something</span><span class="o">.</span><span class="n">is_a?</span> <span class="nb">Array</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">when</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="o">.</span><span class="n">include?</span> <span class="n">something</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">when</span> <span class="n">something</span> <span class="o">=~</span> <span class="sr">/some_regexp/</span> <span class="k">then</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>So far everything is peachy, right?</p>

<p>The problem with the <code>===</code> is that when some people see it they decide
it&rsquo;s very <em>cool</em> and start using it all over their code instead of
its much clearer alternatives. I&rsquo;ve seen <code>===</code> (ab)used quite often for <strong>instance of</strong> checks.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># wtf, why doesn&#39;t this work???</span>
</span><span class='line'><span class="c1"># extremely common mistake I&#39;ve seen numerous times</span>
</span><span class='line'><span class="k">return</span> <span class="k">unless</span> <span class="n">a</span> <span class="o">===</span> <span class="nb">Array</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># === is defined in Module</span>
</span><span class='line'><span class="k">return</span> <span class="k">unless</span> <span class="nb">Array</span> <span class="o">===</span> <span class="n">a</span> <span class="c1"># same as Array.===(a)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;ve also seen it used many times for range inclusion
tests. Fortunately nobody has decided so far that <code>===</code> is preferable
to <code>=~</code> for regular expressions.</p>

<p>It should be our utmost goal as programmers to produce clear and
easily digestible code. This means we should abstain ourselves from
doing clever tricks like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">Array</span> <span class="o">===</span> <span class="n">something</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span> <span class="o">===</span> <span class="mi">7</span>
</span><span class='line'><span class="o">/</span><span class="n">something</span><span class="o">/</span> <span class="o">===</span> <span class="n">some_string</span>
</span></code></pre></td></tr></table></div></figure>


<p>And bet on clarity instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">something</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">Array</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">100</span><span class="p">)</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="mi">7</span><span class="p">)</span>
</span><span class='line'><span class="n">some_string</span> <span class="o">=~</span> <span class="sr">/something/</span>
</span></code></pre></td></tr></table></div></figure>


<p>They don&rsquo;t call it the <strong>case equality operator</strong> for no reason &ndash; it&rsquo;s
meant to be used internally by <code>case</code> expressions. I guess if it were
a regular method (instead of an operator method) we&rsquo;d never have had
to deal with its abuse.</p>

<p>As usual I&rsquo;m looking forward
to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>

<p>Code long and prosper!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #6: Attributes Redux]]></title>
    <link href="http://batsov.com/articles/2013/07/04/the-elements-of-style-in-ruby-number-6-attributes-redux/"/>
    <updated>2013-07-04T15:36:00+03:00</updated>
    <id>http://batsov.com/articles/2013/07/04/the-elements-of-style-in-ruby-number-6-attributes-redux</id>
    <content type="html"><![CDATA[<p>Today we&rsquo;ll talk about attributes in Ruby.</p>

<p>Let&rsquo;s start with the following rule from the
<a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote><p>Use the <code>attr</code> family of functions to define trivial accessors or mutators.</p></blockquote>

<p>Everyone who&rsquo;s coded a bit of Ruby knows it&rsquo;s preferable to generate
trivial reader and writer methods via some metaprogramming magic
instead of writing them by hand. The methods from <code>Module</code> <code>attr</code>,
<code>attr_reader</code>, <code>attr_writer</code> and <code>attr_accessor</code> do exactly that kind
of magic. Here&rsquo;s an example using <code>attr_reader</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@first_name</span> <span class="o">=</span> <span class="n">first_name</span>
</span><span class='line'>    <span class="vi">@last_name</span> <span class="o">=</span> <span class="n">last_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">first_name</span>
</span><span class='line'>    <span class="vi">@first_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">last_name</span>
</span><span class='line'>    <span class="vi">@last_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">:last_name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@first_name</span> <span class="o">=</span> <span class="n">first_name</span>
</span><span class='line'>    <span class="vi">@last_name</span> <span class="o">=</span> <span class="n">last_name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&rsquo;s <code>attr_writer</code> in action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span><span class="o">=</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_writer</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>attr_accessor</code> combines the two:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">,</span> <span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span>
</span><span class='line'>    <span class="vi">@name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">name</span><span class="o">=</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@name</span> <span class="o">=</span> <span class="nb">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty sure none of you has learned anything new at this point. Now we start with the fun part&hellip;</p>

<p>How many of you know how <code>attr</code> behaves? Are you totally sure? Let&rsquo;s
see what the style guide says about it:</p>

<blockquote><p>Avoid the use of <code>attr</code>. Use <code>attr_reader</code> and <code>attr_accessor</code> instead.</p></blockquote>

<p><code>attr</code>&rsquo;s behavior changed between Ruby 1.8 and 1.9. In Ruby 1.8 <code>attr</code>
created a single <em>reader</em> method. With an optional second boolean argument it
created both a <em>reader</em> and a <em>writer</em> method (a la <code>attr_accessor</code>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Ruby 1.8</span>
</span><span class='line'><span class="c1"># same as attr_reader :something</span>
</span><span class='line'><span class="kp">attr</span> <span class="ss">:something</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># creates a single attribute accessor (deprecated in 1.9) - same as attr_accessor :something</span>
</span><span class='line'><span class="kp">attr</span> <span class="ss">:something</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># can&#39;t do this</span>
</span><span class='line'><span class="kp">attr</span> <span class="ss">:one</span><span class="p">,</span> <span class="ss">:two</span><span class="p">,</span> <span class="ss">:three</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that you cannot pass multiple attribute names to <code>attr</code> in Ruby 1.8.</p>

<p>In Ruby 1.9 calling <code>attr</code> with an attribute name and a boolean is
deprecated and it now behaves a lot more like <code>attr_reader</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Ruby 1.9</span>
</span><span class='line'><span class="kp">attr</span> <span class="ss">:one</span><span class="p">,</span> <span class="ss">:two</span><span class="p">,</span> <span class="ss">:three</span> <span class="c1"># behaves as attr_reader</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given all this facts it&rsquo;s not a surprise that so many people think
it&rsquo;s a bad idea to use <code>attr</code>. I guess if the design of that portion
of the API were up to me I&rsquo;d have made <code>attr</code> behave like
<code>attr_accessor</code> from day 1. The name of <code>attr_accessor</code> is a bit of a
misnomer since <code>accessor</code> is hardly a synonym for <strong>reader and
writer</strong>. Anyways, this is not of particular importance. Off to the
next item on our agenda for today.</p>

<p>Is this something that should have been defined with <code>attr_reader</code>?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">something</span>
</span><span class='line'>  <span class="vi">@something_else</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Basically it call comes down to whether this is a trivial reader method or not.
Some people would argue that because the name of the instance variable
and the name of the method are not the same &ndash; it&rsquo;s not. I&rsquo;d argue the
opposite case &ndash; it is! The name of the method does not change the
semantics. In essence you&rsquo;re simply in need of an alias for the
<em>default</em> attribute reader method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">attr_reader</span> <span class="ss">:something_else</span>
</span><span class='line'><span class="n">alias_method</span> <span class="ss">:something</span><span class="p">,</span> <span class="ss">:something_else</span>
</span></code></pre></td></tr></table></div></figure>


<p>Boolean attributes are a bit special, since generally we&rsquo;d like to
have a <code>?</code> at the end of predicate method names, but this cannot be done with
<code>attr_reader/attr_accessor</code>. Some people would simple hand-code such
methods:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">something?</span>
</span><span class='line'>  <span class="vi">@something</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;d employ <code>alias_method</code> again:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">attr_reader</span> <span class="ss">:something</span>
</span><span class='line'><span class="n">alias_method</span> <span class="ss">:something?</span><span class="p">,</span> <span class="ss">:something</span>
</span></code></pre></td></tr></table></div></figure>


<p>I wouldn&rsquo;t call one style necessary good or bad &ndash; it&rsquo;s more of a personal preference.</p>

<p>One final note &ndash; you should use <code>attr_</code> only for trivial reader and writer methods (trivial means that
they do not need any defensive copying or pre-update checks).</p>

<p>Consider this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># attr_reader generates code like this</span>
</span><span class='line'><span class="k">def</span> <span class="nf">something</span>
</span><span class='line'>  <span class="vi">@something</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This would expose <code>@something</code> to external modifications if it&rsquo;s a
mutable object. To shield yourself from this you can use defensive
copying (or freezing when applicable):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># defensive copying in action</span>
</span><span class='line'><span class="k">def</span> <span class="nf">something</span>
</span><span class='line'>  <span class="vi">@something</span><span class="o">.</span><span class="n">dup</span> <span class="c1"># return a copy of @something</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Same goes for attributes writers. If you have an <code>age</code> attribute and you
want to enforce that it should be a positive number you&rsquo;d generally roll your
own writer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">age</span><span class="o">=</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>  <span class="nb">fail</span> <span class="s1">&#39;Age should be a positive number!&#39;</span> <span class="k">unless</span> <span class="n">age</span> <span class="o">&gt;</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@age</span> <span class="o">=</span> <span class="n">age</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This post has become way too long, so I&rsquo;ll be wrapping it up. I hope
you&rsquo;ve found my musing on the subject of attributes useful.</p>

<p>As usual I&rsquo;m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>

<p><strong>P.S.</strong> Happy 4th of July to all my American readers! :&ndash;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #5: Readability of long numeric literals]]></title>
    <link href="http://batsov.com/articles/2013/07/02/the-elements-of-style-in-ruby-number-5-readability-of-long-numeric-literals/"/>
    <updated>2013-07-02T15:01:00+03:00</updated>
    <id>http://batsov.com/articles/2013/07/02/the-elements-of-style-in-ruby-number-5-readability-of-long-numeric-literals</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s topic is the following rule from the <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote><p>Add underscores to large numeric literals to improve their readability.</p></blockquote>

<p>Most of the programs we write feature a substantial number of numeric
literals(e.g. <code>10</code>, <code>0.34</code>, <code>0b1010</code>, <code>0123</code>, <code>0xCAFE</code>). There is nothing
strange or unusual about that. From time to time, however, those literals are pretty long:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MAX_SIZE = 10000000000
</span><span class='line'>DEVIATION = 0.2343434343
</span><span class='line'>BIT_MASK = 0b100101010101</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m pretty sure most of you would have pretty hard time to quickly
digest a number written in this way &ndash; lots of digits and no separators
between them to help us discern the number&rsquo;s <code>structure</code>. At this
point <code>_</code> makes a dramatic appearance and comes to the rescue:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MAX_SIZE = 10_000_000_000
</span><span class='line'>DEVIATION = 0.2_343_434_343
</span><span class='line'>BIT_MASK = 0b1001_0101_0101</span></code></pre></td></tr></table></div></figure>


<p>The addition of a few <code>_</code> improves the readability of those huge literals a ton!</p>

<p>The underscores we add to numeric literals are ignored by <code>Ruby</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="mi">100_000</span>
</span><span class='line'><span class="c1"># =&gt; 100000</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see from the preceding example nothing&rsquo;s lost or changed &ndash;
we&rsquo;ve only gained readability and eased the parsing burden on our
brains.</p>

<p>Obviously we should not overdo <code>_</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># short literals are pretty readable on their own</span>
</span><span class='line'><span class="c1"># bad</span>
</span><span class='line'><span class="mi">1_00</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># good</span>
</span><span class='line'><span class="mi">100</span>
</span></code></pre></td></tr></table></div></figure>


<p>Personally, when dealing with decimal literals, I tend to use <code>_</code> for
numbers with at 5 least digits(e.g. <code>11_948</code>). The number of digits to separate with
<code>_</code> depends on the numeric base &ndash; in decimal it makes sense to group
digits by 3(<code>1_000_000</code>), in binary by 4(<code>0b1111_1010_1110</code>), etc.</p>

<p>That&rsquo;s all for today folks! Hope I managed to convince at least a few
of you of the benefits of using underscores in your long numeric literals.</p>

<p>As usual I&rsquo;m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RuboCop 0.9 is now patrolling the streets!]]></title>
    <link href="http://batsov.com/articles/2013/07/01/rubocop-0-dot-9-is-now-patrolling-the-streets/"/>
    <updated>2013-07-01T17:06:00+03:00</updated>
    <id>http://batsov.com/articles/2013/07/01/rubocop-0-dot-9-is-now-patrolling-the-streets</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/bbatsov/rubocop">RuboCop</a> 0.9 is finally out! This
was one of our most ambitious releases &ndash; over a month of work, ~250
commits, lots of new cops and features and a lot less bugs (OK, I&rsquo;m
not sure about this, but I sincerely hope it&rsquo;s true). Here&rsquo;s the
highlights.</p>

<h2>Portable Linting</h2>

<p>This is a big deal! Prior to 0.9, RuboCop piggybacked on MRI&rsquo;s <code>ruby
-wc</code> to find syntax errors and lint warnings. Obviously apart from
being unportable &ndash; this wasn&rsquo;t particularly fast (spawning processes
never is) either.</p>

<p>That&rsquo;s no longer the case &ndash; errors are now reported directly by
<a href="https://github.com/whitequark/parser">Parser</a> and we&rsquo;ve reimplemented
MRI&rsquo;s linting in pure Ruby into RuboCop itself. Now you&rsquo;ll get the
same errors and warnings on MRI, JRuby and Rubinius. And to top it
off &ndash; we&rsquo;ve added much nicer warning messages and we report even
column information for those (MRI doesn&rsquo;t). This brings me to the next
point.</p>

<h2>Column information</h2>

<p>All RuboCop diagnostics now feature column information as well. Now
you&rsquo;ll be able to jump to a problem in your code even faster. But that&rsquo;s not all&hellip;</p>

<h2>Formatter Support</h2>

<p>We&rsquo;ve introduced the concept of formatters (similar the to RSpec
formatter concept) and we&rsquo;ve bundled a few formatters. We&rsquo;ve also
changed the default output format &ndash; it now pretty similar to <code>clang</code>&rsquo;s
and features extra context information:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spec/models/authentication_spec.rb:12:44: W: `-' interpreted as argument prefix
</span><span class='line'>    }.to change(Authentication, :count).by -1
</span><span class='line'>                                           ^</span></code></pre></td></tr></table></div></figure>


<p>Pretty sure most of you will love this :&ndash;)</p>

<h2>Auto-correction Support</h2>

<p>Running <code>rubocop -a</code> will now correct certain problems automatically. This
feature is alpha quality and just a few cops have support for it right
now. It goes without saying that you shouldn&rsquo;t use it on projects not under
version control (who doesn&rsquo;t use version control?) and without
an excellent test suite (that you undoubtedly have).</p>

<h2>Rails Support</h2>

<p><code>rubocop -R</code> will run additional Rails specific code checks. This
feature is also alpha at this point (meaning there&rsquo;s just one Rails
specific check at this point).</p>

<h2>The Road to 1.0</h2>

<p>We plan 1.0 to be the next RuboCop major release. No new features are in
the pipeline for 1.0 &ndash; we already have so many features that require extra
work and polish anyways. If all goes well expect 1.0 by summer&rsquo;s end with:</p>

<ul>
<li>performance optimizations</li>
<li>refined formatters</li>
<li>enhanced auto-correction support</li>
<li>lots of Rails specific checks</li>
</ul>


<p>I hope you&rsquo;ll enjoy RuboCop 0.9. For the gory details, please take a
look at the epic
<a href="https://github.com/bbatsov/rubocop/blob/master/CHANGELOG.md">Changelog</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Elements of Style in Ruby #4: Array#join vs Array#*]]></title>
    <link href="http://batsov.com/articles/2013/07/01/the-elements-of-style-in-ruby-number-4-array-number-join-vs-array-number-star/"/>
    <updated>2013-07-01T16:28:00+03:00</updated>
    <id>http://batsov.com/articles/2013/07/01/the-elements-of-style-in-ruby-number-4-array-number-join-vs-array-number-star</id>
    <content type="html"><![CDATA[<p>Today&rsquo;s topic is the following rule from the <a href="https://github.com/bbatsov/ruby-style-guide">Ruby Style Guide</a>:</p>

<blockquote><p>Favor the use of <code>Array#join</code> over the fairly cryptic <code>Array#*</code> with
a string argument.</p></blockquote>

<p><code>Array#join</code> and <code>Array#*</code> (with a string argument) behave exactly the same:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="sx">%w(Bruce Wayne)</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39; &#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Bruce Wayne&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">%w(Bruce Wayne)</span> <span class="o">*</span> <span class="s1">&#39; &#39;</span>
</span><span class='line'><span class="c1"># =&gt; &quot;Bruce Wayne&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, considering they both do the same thing why should you opt to use
<code>join</code> instead of <code>*</code>? Here&rsquo;s a few reasons:</p>

<ul>
<li><code>*</code> behaves totally differently when passed an integer argument:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span> <span class="mi">2</span><span class="o">]</span> <span class="o">*</span> <span class="mi">3</span>
</span><span class='line'><span class="c1"># =&gt; [1 2 1 2 1 2]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Personally, I&rsquo;d expect this to be only behavior of such an operator
method and find the alternative one (with a string argument) to be
pretty much counter-intuitive.</p>

<ul>
<li>It&rsquo;s not always clear what <code>*</code> means without additional
context. Take a look at this short snippet:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># a and b are variables</span>
</span><span class='line'><span class="n">a</span> <span class="o">*</span> <span class="n">b</span>
</span></code></pre></td></tr></table></div></figure>


<p>Without some knowledge of <code>a</code> and <code>b</code> we cannot be certain what this
code is going to do. It&rsquo;s hard even to speculate what the code is
going to do. Obviously better variable names would certainly help, but
the point still stands.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>While we still cannot be absolutely certain, it&rsquo;s highly likely that <code>a</code> is
an <code>Array</code> and <code>b</code> is a <code>String</code>.</p>

<ul>
<li><code>*</code> does not carry much of a semantic value in it.</li>
</ul>


<p>Unlike <code>String#%</code>, <code>Array#*</code> with a string argument carries pretty
much no meaning. It&rsquo;s absolutely beyond me how this came into
existence. On the other hand the behavior of <code>Array#*</code> with an integer
argument is pretty reasonable. Here we see a classic example of the
notion that too much operator overloading can be a bad thing, leading
to some pretty unreadable code. An operator should be employed only
when it&rsquo;s use would add clarity to the code, not take clarity away.</p>

<p><code>Array#*</code> has one thing going for it, however &ndash; the fact that few
people know about its use as a substitute for <code>Array#join</code>. I hope
they realize that some unknown features are unknown for a reason &ndash;
because it&rsquo;s bad idea to make use of them.</p>

<p>As usual I&rsquo;m looking forward to hearing your thoughts here and on
<a href="http://twitter.com/bbatsov">Twitter</a>!</p>
]]></content>
  </entry>
  
</feed>
